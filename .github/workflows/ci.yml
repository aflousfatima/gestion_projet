name: Reusable CI Workflow
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      service_path:
        required: true
        type: string
      java_version:
        required: true
        type: string

jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Debug environment and inputs
        run: |
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Service Path: ${{ inputs.service_path }}"
          echo "Java Version: ${{ inputs.java_version }}"
          ls -l ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l .shared/scripts/build.sh || echo "ERROR: build.sh not found"
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          pip cache purge || echo "No pip cache to purge"
          pip list | grep -E 'in-toto|securesystemslib'
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Debug Maven build process
        run: |
          echo "Running build.sh script..."
          bash .shared/scripts/build.sh ${{ inputs.service_path }} || echo "ERROR: build.sh failed"
          echo "Listing target directory:"
          ls -l ${{ inputs.service_path }}/target/ || echo "ERROR: target directory not found"
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR files found"
      - name: Build with Maven and generate in-toto link
        run: |
          bash .shared/scripts/build.sh ${{ inputs.service_path }}
          rm -f maven-build.*.link
          in-toto-run --step-name maven-build \
              --materials ${{ inputs.service_path }}/pom.xml \
              --products ${{ inputs.service_path }}/target/*.jar \
            --key in-toto.key \
            --no-command \
            --verbose \
            --base-path $GITHUB_WORKSPACE
          mv maven-build.d6982dd865aeacdd6febd1acbea1730a2476ad55c8d387ef33c0ad3066773e14.link maven-build.d6982dd8.link || echo "ERROR: Failed to rename link file"
          echo "Content of maven-build link file:"
          cat maven-build.d6982dd8.link
          python3 -m json.tool maven-build.d6982dd8.link || echo "ERROR: Invalid JSON in maven-build.d6982dd8.link"
      - name: Debug JAR before upload
        run: |
            echo "Current directory: $PWD"
            echo "Service Name: ${{ inputs.service_name }}"
            echo "Service Path: ${{ inputs.service_path }}"
            echo "Listing all files in ${{ inputs.service_path }}/target:"
            find ${{ inputs.service_path }}/target -type f || echo "ERROR: No files found in target"
            ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR files found"
            sha256sum ${{ inputs.service_path }}/target/*.jar || echo "ERROR: Failed to compute SHA256"
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/*.jar
          if-no-files-found: error
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-maven-build-${{ inputs.service_name }}
          path: maven-build.d6982dd8.link

  tests:
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target
      - name: Debug downloaded JAR
        run: |
          echo "Current directory: $PWD"
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Service Path: ${{ inputs.service_path }}"
          echo "Listing all files in ${{ inputs.service_path }}/target:"
          find ${{ inputs.service_path }}/target -type f || echo "ERROR: No files found in target"
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR files found"
          sha256sum ${{ inputs.service_path }}/target/*.jar || echo "ERROR: Failed to compute SHA256"
      - name: Run unit and integration tests and generate in-toto link
        run: |
          echo "Current directory: $PWD"
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Service Path: ${{ inputs.service_path }}"
          cd ${{ inputs.service_path }}
          echo "Current directory after cd: $PWD"
          # Exécuter les tests avec JaCoCo pour générer jacoco.xml
          mvn clean test jacoco:report -DskipTests=false -DskipSurefire=false
          echo "Checking for jacoco.xml:"
          ls -l target/site/jacoco/jacoco.xml || echo "ERROR: jacoco.xml not found"
          echo "Checking for JAR file:"
          ls -l target/*.jar || echo "ERROR: No JAR files found"
          sha256sum target/*.jar || echo "ERROR: Failed to compute SHA256"
          # Vérifier le hachage attendu
          echo "Expected JAR hash from maven-build: f68fd98458bbc12e1c075fa128f9b3de9fca61bd80cfb067dfc7ca5f1129e54c"
          sha256sum target/*.jar | grep f68fd98458bbc12e1c075fa128f9b3de9fca61bd80cfb067dfc7ca5f1129e54c || echo "ERROR: JAR hash does not match expected"
          cd $GITHUB_WORKSPACE
          echo "Current directory after cd to root: $PWD"
          echo "Checking for in-toto.key:"
          ls -l in-toto.key || echo "ERROR: in-toto.key not found"
          echo "Listing all files in ${{ inputs.service_path }}/target:"
          find ${{ inputs.service_path }}/target -type f || echo "ERROR: No files found in target"
          rm -f tests.*.link
          in-toto-run --step-name tests \
            --materials ${{ inputs.service_path }}/target/Authentification_Service-0.0.1-SNAPSHOT.jar \
            --products ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml \
            --key in-toto.key \
            --no-command \
            --verbose \
            --base-path $GITHUB_WORKSPACE
          mv tests.d6982dd865aeacdd6febd1acbea1730a2476ad55c8d387ef33c0ad3066773e14.link tests.d6982dd8.link || echo "ERROR: Failed to rename link file"
          echo "Content of tests link file:"
          cat tests.d6982dd8.link
          python3 -m json.tool tests.d6982dd8.link || echo "ERROR: Invalid JSON in tests.d6982dd8.link"
          echo "Verifying JAR hash in tests link:"
          grep '"sha256": "f68fd98458bbc12e1c075fa128f9b3de9fca61bd80cfb067dfc7ca5f1129e54c"' tests.d6982dd8.link || echo "ERROR: JAR hash not found in tests link"
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-tests-${{ inputs.service_name }}
          path: tests.*.link
        
  snyk-scan:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Debug directory contents
        run: |
          ls -R ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l ${{ inputs.service_path }}/mvnw || echo "ERROR: mvnw not found"
      - name: Make mvnw executable
        run: |
          cd ${{ inputs.service_path }}
          chmod +x mvnw
          ls -l mvnw
      - name: Validate Maven Wrapper
        run: |
          cd ${{ inputs.service_path }}
          ./mvnw --version || echo "ERROR: mvnw failed to run"
      - name: Run Snyk scans
        run: |
          cd ${{ inputs.service_path }}
          snyk test --sarif-file-output=snyk_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
          snyk code test --sarif-file-output=snyk_code_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Generate in-toto link for Snyk scans
        run: |
          in-toto-run --step-name snyk-scan \
          --materials ${{ inputs.service_path }}/pom.xml \
          --products ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif \
          --key in-toto.key \
          --no-command \
          --verbose

          echo "Listing generated snyk link files:"
          ls -l snyk-scan.*.link || echo "ERROR: No link file found"

          echo "Content of snyk link file:"
          cat snyk-scan.*.link | grep keyid || echo "ERROR: No keyid found"

      - name: Monitor with Snyk
        run: |
          cd ${{ inputs.service_path }}
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-scan-results-${{ inputs.service_name }}
          path: |
            ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif
            ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-snyk-scan-${{ inputs.service_name }}
          path: snyk-scan.*.link

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [maven-build, tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target
      - name: Debug target directory
        run: |
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR found in target/"
          ls -l ${{ inputs.service_path }}/Dockerfile || echo "ERROR: Dockerfile not found"
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        run: |
          docker buildx build \
          --file ${{ inputs.service_path }}/Dockerfile --tag ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest --tag ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }} --cache-from=type=gha --cache-to=type=gha,mode=max --progress=plain --push ${{ inputs.service_path }}
      - name: Generate in-toto link for Docker build and push
        run: |
          in-toto-run --step-name docker-build-push \
            --materials ${{ inputs.service_path }}/target/*.jar ${{ inputs.service_path }}/Dockerfile \
            --products /tmp/in-toto-placeholder.txt \
            --key in-toto.key \
            --no-command \
            --verbose
          echo "Listing generated Docker link files:"
          ls -l docker-build-push.*.link || echo "ERROR: No link file found"
          echo "Content of Docker link file:"
          cat docker-build-push.*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-docker-build-push-${{ inputs.service_name }}
          path: docker-build-push.*.link

  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Debug image existence
        run: |
          echo "Attempting to pull image from GHCR"
          docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest || echo "ERROR: Failed to pull image from GHCR"
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/trivy.yaml') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
      - name: Scan Docker image with Trivy
        run: |
          echo " Installing Trivy..."
          sudo apt-get update
          sudo apt-get install wget -y
          wget -qO- https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo bash
          sudo mv ./bin/trivy /usr/local/bin/trivy
          echo " Running Trivy scan..."
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
          echo " Table format:"
          trivy image --format table --severity CRITICAL,HIGH --vuln-type os,library --scanners vuln,secret,misconfig $IMAGE
          echo " JSON format:"
          trivy image --format json --output trivy-image-scan-${{ inputs.service_name }}.json --severity CRITICAL,HIGH --vuln-type os,library --scanners vuln,secret,misconfig $IMAGE
          echo " SARIF format:"
          trivy image --format sarif --output trivy-image-scan-${{ inputs.service_name }}.sarif --severity CRITICAL,HIGH --vuln-type os,library --scanners vuln,secret,misconfig $IMAGE

      - name: Generate in-toto link for Trivy scan
        run: |
          in-toto-run --step-name trivy-scan \
            --products trivy-image-scan-${{ inputs.service_name }}.sarif trivy-image-scan-${{ inputs.service_name }}.json \
            --key in-toto.key \
            --no-command \
            --verbose
            echo "Listing generated Trivy link files:"
            ls -l trivy-scan.*.link || echo "ERROR: No link file found"
            echo "Content of Trivy link file:"
            cat trivy-scan.*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Upload Trivy SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.sarif
      - name: Upload Trivy JSON results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-json-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.json
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-trivy-scan-${{ inputs.service_name }}
          path: trivy-scan.*.link                
      - name: Install Google Cloud Container Analysis client
        run: |
          pip install --no-cache-dir google-cloud-containeranalysis==2.18.0
      - name: Debug network connectivity
        run: |
          ping -c 4 containeranalysis.googleapis.com || echo "Ping failed"
          nslookup containeranalysis.googleapis.com || echo "DNS resolution failed"
          curl -I https://containeranalysis.googleapis.com || echo "Curl failed"
      - name: Debug OAuth credentials and API access
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          cat << 'EOF' > debug_credentials.py
          from google.oauth2 import service_account
          from grafeas.grafeas_v1 import GrafeasClient
          from grafeas.grafeas_v1.services.grafeas.transports import GrafeasGrpcTransport
          import grpc
          import os
          def metadata_callback(context, callback):
              credentials = service_account.Credentials.from_service_account_file(
                  'gcp_sa_key.json',
                  scopes=['https://www.googleapis.com/auth/cloud-platform']
              )
              token = credentials.token
              if not token:
                  credentials.refresh(None)
                  token = credentials.token
                callback([('authorization', f'Bearer {token}')], None)
          with open('gcp_sa_key.json', 'w') as f:
              f.write(os.environ['GOOGLE_APPLICATION_CREDENTIALS_JSON'])
          try:
              credentials = service_account.Credentials.from_service_account_file(
                  'gcp_sa_key.json',
                  scopes=['https://www.googleapis.com/auth/cloud-platform']
              )
              print(f"Scopes: {credentials.scopes}")
              print(f"Service account email: {credentials.service_account_email}")
              print("Credentials loaded successfully")
              ssl_credentials = grpc.ssl_channel_credentials()
              auth_credentials = grpc.metadata_call_credentials(metadata_callback)
              composite_credentials = grpc.composite_channel_credentials(
                  ssl_credentials,
                  auth_credentials
              )
              channel = grpc.secure_channel(
                  'containeranalysis.googleapis.com',
                  composite_credentials,
                  options=(('grpc.default_authority', 'containeranalysis.googleapis.com'),)
              )
              transport = GrafeasGrpcTransport(channel=channel)
              client = GrafeasClient(transport=transport)
              print("GrafeasClient initialized successfully")
              project_id = "grafeas-poc-2025"
              parent = f"projects/{project_id}/notes"
              try:
                  for note in client.list_notes(parent=parent):
                      print(f"Found note: {note.name}")
                  print("Successfully listed notes")
              except Exception as e:
                  print(f"Failed to list notes: {e}")
          except Exception as client_error:
              print(f"Failed to initialize GrafeasClient: {client_error}")
          EOF
          python3 debug_credentials.py

    
      - name: Create Grafeas note for Trivy scan
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          cat << 'EOF' > create_trivy_note.py
          from grafeas.grafeas_v1 import GrafeasClient, Severity
          from grafeas.grafeas_v1.services.grafeas.transports import GrafeasGrpcTransport
          from google.api_core.exceptions import AlreadyExists
          from google.oauth2 import service_account
          import json
          import os
          with open('gcp_sa_key.json', 'w') as f:
              f.write(os.environ['GOOGLE_APPLICATION_CREDENTIALS_JSON'])
          credentials = service_account.Credentials.from_service_account_file(
              'gcp_sa_key.json',
               scopes=['https://www.googleapis.com/auth/containeranalysis.notes']
          )
          client = GrafeasClient(
            transport=GrafeasGrpcTransport(host="containeranalysis.googleapis.com"),
            credentials=credentials
          )
          project_id = "grafeas-poc-2025"
          note_id = "trivy-vulnerability-${{ inputs.service_name }}"
          note = {
            "vulnerability": {
                "severity": Severity.HIGH,
                "details": [
                    {
                         "description": "Trivy scan results for ${{ inputs.service_name }}"
                    }
                ]
            }
          }
          parent = f"projects/{project_id}/notes"
          try:
              client.create_note(parent=parent, note_id=note_id, note=note)
              print(f"Created note: {note_id}")
          except AlreadyExists:
              print(f"Note {note_id} already exists, skipping creation")
          EOF
          python3 create_trivy_note.py
          
      - name: Get image digest
        id: get-digest
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE 2>/dev/null | cut -d'@' -f2 || echo "")
          if [ -z "$DIGEST" ]; then
              docker pull $IMAGE
              DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE | cut -d'@' -f2)
          fi
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: Create Grafeas occurrence for Trivy scan
        env:
            GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
            IMAGE_DIGEST: ${{ steps.get-digest.outputs.image_digest }}
        run: |
          cat << 'EOF' > create_trivy_occurrence.py
          from grafeas.grafeas_v1 import GrafeasClient, VulnerabilityOccurrence, Severity
          import json
          import os
          with open('gcp_sa_key.json', 'w') as f:
              f.write(os.environ['GOOGLE_APPLICATION_CREDENTIALS_JSON'])
          os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'gcp_sa_key.json'

          client = GrafeasClient()
          project_id = "${{ github.repository_owner }}"
          note_id = "trivy-vulnerability-${{ inputs.service_name }}"
          occurrence = {
              "resource_uri": f"ghcr.io/{project_id}/${{ inputs.service_name }}@{os.environ['IMAGE_DIGEST']}",
              "note_name": f"projects/{project_id}/notes/{note_id}",
              "vulnerability": {
                  "severity": Severity.HIGH,
                  "package_issue": []
              }
            }
          parent = f"projects/{project_id}/occurrences"
          client.create_occurrence(parent=parent, occurrence=occurrence)
          print(f"Created occurrence for Trivy scan")
          EOF
          python3 create_trivy_occurrence.py
    
  sign_and_verify:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: 'v2.4.3'
      - name: Debug image availability
        run: |
          echo "Listing available images:"
          docker images
          echo "Attempting to pull image:"
          docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }} || true
      - name: Get image digest
        id: get-digest
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }}
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE 2>/dev/null | cut -d'@' -f2 || echo "")
          if [ -z "$DIGEST" ]; then
            echo "Failed to get digest, pulling image explicitly"
            docker pull $IMAGE
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE | cut -d'@' -f2)
          fi
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Digest found: $DIGEST"
      - name: Load Cosign Private Key
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | tr -d '\r' > cosign.key
      - name: Load Cosign Public Key
        run: echo "${{ secrets.COSIGN_PUBLIC_KEY }}" | tr -d '\r' > cosign.pub
      - name: Check for existing signature
        id: check-signature
        run: |
          if cosign verify --key cosign.pub ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }} >/dev/null 2>&1; then
            echo "Signature exists, skipping signing"
            echo "signature_exists=true" >> $GITHUB_OUTPUT
          else
            echo "signature_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Sign the Docker image with Cosign
        if: steps.check-signature.outputs.signature_exists == 'false'
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }}  
          cosign sign --yes --key cosign.key --tlog-upload=false $IMAGE
      - name: Generate in-toto link for Cosign signature
        if: steps.check-signature.outputs.signature_exists == 'false'
        run: |
          in-toto-run --step-name sign-image \
            --materials cosign.key \
            --products cosign.pub \
            --key in-toto.key \
            --no-command \
            --verbose
            echo "Cosign in-toto link file:"
            ls -l sign-image.*.link || echo "ERROR: No link file found"
            cat sign-image.*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Generate SLSA provenance predicate
        run: |
          echo '{
            "_type": "https://in-toto.io/Statement/v0.1",
            "subject": [{"name": "ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}", "digest": {"sha256": "${{ steps.get-digest.outputs.image_digest }}"}}],
            "predicateType": "https://slsa.dev/provenance/v1",
            "predicate": {
              "buildDefinition": {
                "buildType": "https://slsa.dev/container/v1",
                "externalParameters": {"repository": "${{ github.repository }}", "ref": "${{ github.sha }}"},
                "resolvedDependencies": []
              },
              "runDetails": {
                "builder": {"id": "https://github.com/actions/runner"},
                "metadata": {"invocationId": "${{ github.run_id }}"}
              }
            }
          }' > slsa-provenance.json
      - name: Generate SLSA provenance attestation
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign attest --yes --key cosign.key --tlog-upload=false --type=https://slsa.dev/provenance/v1 --predicate slsa-provenance.json ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }}
      - name: Verify SLSA provenance attestation
        run: cosign verify-attestation --key cosign.pub --type https://slsa.dev/provenance/v1 ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }} | jq .
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-sign-image-${{ inputs.service_name }}
          path: sign-image.*.link
      - name: Confirm signature and attestation success
        run: echo "Signature, attestation, and in-toto links succeeded!"

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [tests, snyk-scan, docker-build-push]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd ${{ inputs.service_path }}
          mvn -B clean verify
          mvn -B sonar:sonar \
            -Dsonar.projectKey=aflousfatima_gestion_projet_${{ inputs.service_name }} \
            -Dsonar.organization=aflousfatima \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      - name: Generate in-toto link for SonarQube scan
        run: |
          in-toto-run --step-name sonar-analysis \
              --materials ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml \
              --key in-toto.key \
              --no-command \
              --verbose
          echo "SonarQube in-toto link file:"
          ls -l sonar-analysis.*.link || echo "ERROR: No link file found"
          cat sonar-analysis.*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-sonar-analysis-${{ inputs.service_name }}
          path: sonar-analysis.*.link

  verify_pipeline:
    runs-on: ubuntu-latest
    needs: [maven-build, tests, snyk-scan, docker-build-push, trivy-scan, sign_and_verify, sonar-analysis]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - name: Clean environment
      run: |
        rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
        ls -l || echo "Directory is empty"
    - name: Install in-toto and securesystemslib
      run: |
        pip uninstall -y in-toto securesystemslib || true
        pip install in-toto==2.1.0 securesystemslib==0.31.0
        pip list | grep -E 'in-toto|securesystemslib'
    - name: Download in-toto links
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-maven-build-${{ inputs.service_name }}
        path: .
    - name: Download in-toto tests link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-tests-${{ inputs.service_name }}
        path: .
    - name: Download in-toto snyk scan link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-snyk-scan-${{ inputs.service_name }}
        path: .
    - name: Download in-toto docker build link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-docker-build-push-${{ inputs.service_name }}
        path: .
    - name: Download in-toto trivy scan link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-trivy-scan-${{ inputs.service_name }}
        path: .
    - name: Download in-toto sign image link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-sign-image-${{ inputs.service_name }}
        path: .
    - name: Download in-toto sonar analysis link
      uses: actions/download-artifact@v4
      with:
        name: in-toto-link-sonar-analysis-${{ inputs.service_name }}
        path: .
    - name: Debug directory contents
      run: |
        ls -l .in-toto/root.layout || echo "ERROR: root.layout not found"
        ls -l *.link || echo "ERROR: No link files found"
        ls -l .in-toto/in-toto.pub || echo "ERROR: in-toto.pub not found"
    - name: Debug raw root.layout
      run: |
        echo "Raw content of root.layout:"
        cat .in-toto/root.layout || echo "ERROR: Cannot read root.layout"
    - name: Clean JSON files
      run: |
        for file in *.link .in-toto/root.layout; do
          if [ -f "$file" ]; then
            echo "Cleaning $file"
            python3 .shared/scripts/clean_json.py "$file" || echo "Failed to clean $file"
            if [ -f "$file.tmp" ]; then
              mv "$file.tmp" "$file" || echo "Failed to move temporary file for $file"
            fi
          fi
        done
    - name: Validate layout file
      run: |
        cat .in-toto/root.layout
        python3 -m json.tool .in-toto/root.layout || echo "ERROR: Invalid JSON in root.layout"
        grep '"signatures"' .in-toto/root.layout || echo "ERROR: No signatures found in root.layout"
    - name: Debug link files
      run: |
        for link in *.link; do
          echo "Content of $link"
          cat "$link"
          python3 -m json.tool "$link" || echo "ERROR: Invalid JSON in $link"
        done
    - name: Validate link files
      run: |
        for link in *.link; do
          echo "Validating $link"
          python3 -m json.tool "$link" || echo "ERROR: Invalid JSON in $link"
          grep '"keyid": "d6982dd865aeacdd6febd1acbea1730a2476ad55c8d387ef33c0ad3066773e14"' "$link" || echo "ERROR: Incorrect keyid in $link"
        done
    - name: Verify in-toto pipeline
      run: |
        in-toto-verify --layout .in-toto/root.layout --layout-key .in-toto/in-toto.pub --verbose > in-toto-verify.log 2>&1 || true
        cat in-toto-verify.log
    - name: Verify Grafeas metadata
      env:
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GCP_SA_KEY }}
        IMAGE_DIGEST: ${{ needs.docker-build-push.outputs.image_digest }} # Suppose que le digest est passé depuis docker-build-push
      run: |
        cat << 'EOF' > verify_grafeas.py
        from google.cloud import containeranalysis_v1
        import os
        with open('gcp_sa_key.json', 'w') as f:
          f.write(os.environ['GOOGLE_APPLICATION_CREDENTIALS_JSON'])
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'gcp_sa_key.json'

        client = containeranalysis_v1.ContainerAnalysisClient()
        project_id = "${{ github.repository_owner }}"
        resource_uri = f"ghcr.io/{project_id}/${{ inputs.service_name }}@{os.environ['IMAGE_DIGEST']}"
        filter_str = f'resourceUri="{resource_uri}" kind="VULNERABILITY"'
        parent = f"projects/{project_id}/occurrences"
    
        for occurrence in client.list_occurrences(parent=parent, filter=filter_str):
            severity = occurrence.vulnerability.severity
            if severity in [containeranalysis_v1.Severity.CRITICAL, containeranalysis_v1.Severity.HIGH]:
              print(f"Critical or High vulnerability found: {occurrence.name}")
              exit(1)
        print("No critical or high vulnerabilities found")
        EOF
        python3 verify_grafeas.py
