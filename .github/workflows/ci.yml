name: Reusable CI Workflow
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      service_path:
        required: true
        type: string
      java_version:
        required: true
        type: string

jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: bash .shared/scripts/build.sh ${{ inputs.service_path }}
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/*.jar
          if-no-files-found: error

  tests:
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run unit and integration tests
        run: bash .shared/scripts/test.sh ${{ inputs.service_path }}
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml


  snyk-scan:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Debug directory contents
        run: |
          ls -R ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l ${{ inputs.service_path }}/mvnw || echo "ERROR: mvnw not found"
      - name: Make mvnw executable
        run: |
          cd ${{ inputs.service_path }}
          chmod +x mvnw
          ls -l mvnw
      - name: Validate Maven Wrapper
        run: |
          cd ${{ inputs.service_path }}
          ./mvnw --version || echo "ERROR: mvnw failed to run"
      - name: Run Snyk to scan dependencies
        run: |
          cd ${{ inputs.service_path }}
          snyk test --sarif-file-output=snyk_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Run Snyk code scan
        run: |
          cd ${{ inputs.service_path }}
          snyk code test --sarif-file-output=snyk_code_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Monitor with Snyk
        run: |
          cd ${{ inputs.service_path }}
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-scan-results-${{ inputs.service_name }}
          path: |
            ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif
            ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [maven-build, tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target
      - name: Debug target directory
        run: |
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR found in target/"
          ls -l ${{ inputs.service_path }}/Dockerfile || echo "ERROR: Dockerfile not found"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.service_path }}
          file: ${{ inputs.service_path }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: --progress=plain

  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug image existence
        run: |
          echo "Attempting to pull image from GHCR"
          docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest || echo "ERROR: Failed to pull image from GHCR"
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/trivy.yaml') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
      - name: Scan Docker image with Trivy (Table)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
          scan-type: image
          format: table
          severity: CRITICAL,HIGH
          vuln-type: os,library
          scanners: vuln,secret,misconfig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Scan Docker image with Trivy (JSON)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
          scan-type: image
          format: json
          output: trivy-image-scan-${{ inputs.service_name }}.json
          severity: CRITICAL,HIGH
          vuln-type: os,library
          scanners: vuln,secret,misconfig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Scan Docker image with Trivy (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest
          scan-type: image
          format: sarif
          output: trivy-image-scan-${{ inputs.service_name }}.sarif
          severity: CRITICAL,HIGH
          vuln-type: os,library
          scanners: vuln,secret,misconfig
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Trivy SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.sarif
      - name: Upload Trivy JSON results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-json-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.json

  sign_and_verify:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: 'v2.4.3'
      - name: Get image digest
        id: get-digest
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }}
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE | cut -d'@' -f2)
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
      - name: Load Cosign Private Key
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | tr -d '\r' > cosign.key
      - name: Load Cosign Public Key
        run: echo "${{ secrets.COSIGN_PUBLIC_KEY }}" | tr -d '\r' > cosign.pub
      - name: Sign the Docker image with Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign sign --yes --key cosign.key --no-tlog-upload --force ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }}
      - name: Verify the Docker image signature
        run: |
          cosign verify --key cosign.pub ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }} | jq .
          echo "Signature verification succeeded!"
          env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [tests, snyk-scan, docker-build-push]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Verify project structure
        run: |
          ls -R ${{ inputs.service_path }}/src/main/java
          ls -R ${{ inputs.service_path }}/target/classes || echo "ERROR: target/classes not found"
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd ${{ inputs.service_path }}
          mvn -B clean verify
          ls -R target/classes || echo "ERROR: target/classes not found"
          ls -R target/site/jacoco || echo "ERROR: jacoco.xml not found"
          mvn -B sonar:sonar \
            -Dsonar.projectKey=fatimaaflous_gestion_projet_${{ inputs.service_name }} \
            -Dsonar.organization=fatimaaflous \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
