name: Reusable CI Workflow
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      service_path:
        required: true
        type: string
      java_version:
        required: true
        type: string

jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: bash .shared/scripts/build.sh ${{ inputs.service_path }}

  tests:
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run unit and integration tests
        run: bash .shared/scripts/test.sh ${{ inputs.service_path }}
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml


  snyk-scan:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Debug directory contents
        run: |
          ls -R ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l ${{ inputs.service_path }}/mvnw || echo "ERROR: mvnw not found"
      - name: Make mvnw executable
        run: |
          cd ${{ inputs.service_path }}
          chmod +x mvnw
          ls -l mvnw
      - name: Validate Maven Wrapper
        run: |
          cd ${{ inputs.service_path }}
          ./mvnw --version || echo "ERROR: mvnw failed to run"
      - name: Run Snyk to scan dependencies
        run: |
          cd ${{ inputs.service_path }}
          snyk test --sarif-file-output=snyk_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Run Snyk code scan
        run: |
          cd ${{ inputs.service_path }}
          snyk code test --sarif-file-output=snyk_code_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Monitor with Snyk
        run: |
          cd ${{ inputs.service_path }}
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-scan-results-${{ inputs.service_name }}
          path: |
            ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif
            ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif


            
  sonar-analysis:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Verify project structure
        run: |
          ls -R ${{ inputs.service_path }}/src/main/java
          ls -R ${{ inputs.service_path }}/target/classes || echo "ERROR: target/classes not found"
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd ${{ inputs.service_path }}
          mvn -B clean verify
          ls -R target/classes || echo "ERROR: target/classes not found"
          ls -R target/site/jacoco || echo "ERROR: jacoco.xml not found"
          mvn -B sonar:sonar \
            -Dsonar.projectKey=fatimaaflous_gestion_projet_${{ inputs.service_name }} \
            -Dsonar.organization=fatimaaflous \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
