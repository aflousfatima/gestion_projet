name: Reusable CI Workflow
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      service_path:
        required: true
        type: string
      java_version:
        required: true
        type: string

jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Clean environment
        run: |
          rm -rf ~/.in-toto *.key *.pub *.link ~/.local/lib/python3*
          ls -l || echo "Directory is empty"
      - name: Install in-toto and securesystemslib
        run: |
          pip uninstall -y in-toto securesystemslib || true
          pip install in-toto==2.1.0 securesystemslib==0.31.0
          pip list | grep -E 'in-toto|securesystemslib'
      - name: Check in-toto version
        run: in-toto-run --version
      - name: Debug environment and inputs
        run: |
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Service Path: ${{ inputs.service_path }}"
          echo "Java Version: ${{ inputs.java_version }}"
          ls -l ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l .shared/scripts/build.sh || echo "ERROR: build.sh not found"
      - name: Decrypt in-toto private key
        run: |
          openssl enc -aes-256-cbc -d -in .in-toto/private.key.enc -out in-toto.key -pass pass:"${{ secrets.KEY_PASSPHRASE }}"
          chmod 600 in-toto.key
          ls -l in-toto.key || echo "ERROR: Failed to decrypt private key"
      - name: Debug in-toto private key ID
        run: |
          ls -l
          sha256sum in-toto.key || shasum -a 256 in-toto.key
          head -n 1 in-toto.key
          tail -n 1 in-toto.key
          pip cache purge || echo "No pip cache to purge"
          pip list | grep -E 'in-toto|securesystemslib'
          cat << 'EOF' > check_keyid.py
          from securesystemslib.keys import import_rsakey_from_pem
          with open('in-toto.key', 'rb') as f:
              pem = f.read().decode('utf-8')
          key = import_rsakey_from_pem(pem)
          print('Key ID: {}'.format(key['keyid']))
          EOF
          python3 check_keyid.py
          in-toto-run --step-name debug-keyid-$(date +%s) --key in-toto.key --verbose -- bash -c "echo test" || true
          ls -l *.link
          cat debug-keyid-*.link | grep keyid || echo "ERROR: No keyid found"
        
      - name: Debug Maven build process
        run: |
          echo "Running build.sh script..."
          bash .shared/scripts/build.sh ${{ inputs.service_path }} || echo "ERROR: build.sh failed"
          echo "Listing target directory:"
          ls -l ${{ inputs.service_path }}/target/ || echo "ERROR: target directory not found"
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR files found"
      - name: Build with Maven and generate in-toto link
        run: |
          in-toto-run --step-name maven-build \
            --materials ${{ inputs.service_path }}/pom.xml \
            --products ${{ inputs.service_path }}/target/*.jar \
            --key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- bash .shared/scripts/build.sh ${{ inputs.service_path }}
          echo "Listing generated link files:"
          ls -l maven-build.*.link || echo "ERROR: No maven-build link file found"
          echo "Content of maven-build link file:"
          cat maven-build.*.link | grep keyid || echo "ERROR: No keyid found"
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/*.jar
          if-no-files-found: error
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-maven-build-${{ inputs.service_name }}
          path: maven-build.*.link

  tests:
    runs-on: ubuntu-latest
    needs: maven-build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: Debug in-toto private key
        run: |
          echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
          cat in-toto.key
          in-toto-run --step-name debug-key --signing-key in-toto.key -- bash -c "echo test"
          ls -l *.link
          cat debug-key.*.link
      - name: Run unit and integration tests and generate in-toto link
        run: |
          in-toto-run --step-name tests \
            --materials ${{ inputs.service_path }}/target/*.jar \
            --products ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- bash .shared/scripts/test.sh ${{ inputs.service_path }}
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-tests-${{ inputs.service_name }}
          path: tests.*.link

  snyk-scan:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: Debug directory contents
        run: |
          ls -R ${{ inputs.service_path }}
          cat ${{ inputs.service_path }}/pom.xml || echo "ERROR: pom.xml not found"
          ls -l ${{ inputs.service_path }}/mvnw || echo "ERROR: mvnw not found"
      - name: Make mvnw executable
        run: |
          cd ${{ inputs.service_path }}
          chmod +x mvnw
          ls -l mvnw
      - name: Validate Maven Wrapper
        run: |
          cd ${{ inputs.service_path }}
          ./mvnw --version || echo "ERROR: mvnw failed to run"
      - name: Run Snyk scans and generate in-toto link
        run: |
            in-toto-run --step-name snyk-scan \
            --materials ${{ inputs.service_path }}/pom.xml \
            --products ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- sh -c 'cd ${{ inputs.service_path }} && snyk test --sarif-file-output=snyk_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true; cd ${{ inputs.service_path }} && snyk code test --sarif-file-output=snyk_code_test_${{ inputs.service_name }}.sarif --severity-threshold=high || true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Monitor with Snyk
        run: |
          cd ${{ inputs.service_path }}
          snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-scan-results-${{ inputs.service_name }}
          path: |
            ${{ inputs.service_path }}/snyk_test_${{ inputs.service_name }}.sarif
            ${{ inputs.service_path }}/snyk_code_test_${{ inputs.service_name }}.sarif
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-snyk-scan-${{ inputs.service_name }}
          path: snyk-scan.*.link

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [maven-build, tests]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-${{ inputs.service_name }}
          path: ${{ inputs.service_path }}/target
      - name: Debug target directory
        run: |
          ls -l ${{ inputs.service_path }}/target/*.jar || echo "ERROR: No JAR found in target/"
          ls -l ${{ inputs.service_path }}/Dockerfile || echo "ERROR: Dockerfile not found"
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image and generate in-toto link
        run: |
          in-toto-run --step-name docker-build-push \
            --materials ${{ inputs.service_path }}/target/*.jar ${{ inputs.service_path }}/Dockerfile \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- docker buildx build \
              --file ${{ inputs.service_path }}/Dockerfile \
              --tag ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest \
              --tag ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }} \
              --cache-from=type=gha \
              --cache-to=type=gha,mode=max \
              --progress=plain \
              --push \
              ${{ inputs.service_path }}
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-docker-build-push-${{ inputs.service_name }}
          path: docker-build-push.*.link

  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      security-events: write
      actions: read
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: Debug image existence
        run: |
          echo "Attempting to pull image from GHCR"
          docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest || echo "ERROR: Failed to pull image from GHCR"
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/trivy.yaml') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
      - name: Scan Docker image with Trivy and generate in-toto link
        run: |
          in-toto-run --step-name trivy-scan \
            --products trivy-image-scan-${{ inputs.service_name }}.sarif trivy-image-scan-${{ inputs.service_name }}.json \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- sh -c 'trivy image --format table --severity CRITICAL,HIGH --vuln-type os,library --scanners vuln,secret,misconfig ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest; trivy image --format json --output trivy-image-scan-${{ inputs.service_name }}.json --severity CRITICAL,HIGH --vuln-type os,library ---IN_TOTO_PRIVATE_KEY scanners vuln,secret,misconfig ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest; trivy image --format sarif --output trivy-image-scan-${{ inputs.service_name }}.sarif --severity CRITICAL,HIGH --vuln-type os,library --scanners vuln,secret,misconfig ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Trivy SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.sarif
      - name: Upload Trivy JSON results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-json-${{ inputs.service_name }}
          path: trivy-image-scan-${{ inputs.service_name }}.json
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-trivy-scan-${{ inputs.service_name }}
          path: trivy-scan.*.link

  sign_and_verify:
    runs-on: ubuntu-latest
    needs: docker-build-push
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Convert service name to lowercase
        id: lowercase
        run: echo "service_name_lower=$(echo ${{ inputs.service_name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1
        with:
          cosign-release: 'v2.4.3'
      - name: Debug image availability
        run: |
          echo "Listing available images:"
          docker images
          echo "Attempting to pull image:"
          docker pull ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }} || true
      - name: Get image digest
        id: get-digest
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}:sha-${{ github.sha }}
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE 2>/dev/null | cut -d'@' -f2 || echo "")
          if [ -z "$DIGEST" ]; then
            echo "Failed to get digest, pulling image explicitly"
            docker pull $IMAGE
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $IMAGE | cut -d'@' -f2)
          fi
          echo "image_digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Digest found: $DIGEST"
      - name: Load Cosign Private Key
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" | tr -d '\r' > cosign.key
      - name: Load Cosign Public Key
        run: echo "${{ secrets.COSIGN_PUBLIC_KEY }}" | tr -d '\r' > cosign.pub
      - name: Check for existing signature
        id: check-signature
        run: |
          if cosign verify --key cosign.pub ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }} >/dev/null 2>&1; then
            echo "Signature exists, skipping signing"
            echo "signature_exists=true" >> $GITHUB_OUTPUT
          else
            echo "signature_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Sign the Docker image with Cosign and generate in-toto link
        if: steps.check-signature.outputs.signature_exists == 'false'
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          in-toto-run --step-name sign-image \
            --materials cosign.key \
            --products cosign.pub \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- cosign sign --yes --key cosign.key --tlog-upload=false ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }}

      - name: Generate SLSA provenance predicate
        run: |
          echo '{
            "_type": "https://in-toto.io/Statement/v0.1",
            "subject": [{"name": "ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}", "digest": {"sha256": "${{ steps.get-digest.outputs.image_digest }}"}}],
            "predicateType": "https://slsa.dev/provenance/v1",
            "predicate": {
              "buildDefinition": {
                "buildType": "https://slsa.dev/container/v1",
                "externalParameters": {"repository": "${{ github.repository }}", "ref": "${{ github.sha }}"},
                "resolvedDependencies": []
              },
              "runDetails": {
                "builder": {"id": "https://github.com/actions/runner"},
                "metadata": {"invocationId": "${{ github.run_id }}"}
              }
            }
          }' > slsa-provenance.json
      - name: Generate SLSA provenance attestation
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign attest --yes --key cosign.key --tlog-upload=false --type=https://slsa.dev/provenance/v1 --predicate slsa-provenance.json ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }}         
      - name: Verify SLSA provenance attestation
        run: cosign verify-attestation --key cosign.pub --no-tlog --type https://slsa.dev/provenance/v1 ghcr.io/${{ github.repository_owner }}/${{ steps.lowercase.outputs.service_name_lower }}@${{ steps.get-digest.outputs.image_digest }} | jq .
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-sign-image-${{ inputs.service_name }}
          path: sign-image.*.link
      - name: Confirm signature and attestation success
        run: echo "Signature, attestation, and in-toto links succeeded!"

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [tests, snyk-scan, docker-build-push]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('${{ inputs.service_path }}/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Load in-toto private key
        run: echo "${{ secrets.IN_TOTO_PRIVATE_KEY }}" | tr -d '\r' > in-toto.key
      - name: SonarQube Scan and generate in-toto link
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          in-toto-run --step-name sonar-analysis \
            --materials ${{ inputs.service_path }}/target/site/jacoco/jacoco.xml \
            --signing-key in-toto.key \
            --run-timeout 300 \
            --verbose \
            -- sh -c 'cd ${{ inputs.service_path }} && mvn -B clean verify && ls -R src/main/java && ls -R target/classes || echo "ERROR: target/classes not found" && mvn -B sonar:sonar -Dsonar.projectKey=aflousfatima_gestion_projet_${{ inputs.service_name }} -Dsonar.organization=aflousfatima -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}'
      - name: Upload in-toto link
        uses: actions/upload-artifact@v4
        with:
          name: in-toto-link-sonar-analysis-${{ inputs.service_name }}
          path: sonar-analysis.*.link

  verify_pipeline:
    runs-on: ubuntu-latest
    needs: [maven-build, tests, snyk-scan, docker-build-push, trivy-scan, sign_and_verify, sonar-analysis]
    steps:
      - uses: actions/checkout@v4
      - name: Install in-toto
        run: pip install in-toto --upgrade
      - name: Download in-toto links
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-maven-build-${{ inputs.service_name }}
          path: .
      - name: Download in-toto tests link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-tests-${{ inputs.service_name }}
          path: .
      - name: Download in-toto snyk scan link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-snyk-scan-${{ inputs.service_name }}
          path: .
      - name: Download in-toto docker build link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-docker-build-push-${{ inputs.service_name }}
          path: .
      - name: Download in-toto trivy scan link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-trivy-scan-${{ inputs.service_name }}
          path: .
      - name: Download in-toto sign image link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-sign-image-${{ inputs.service_name }}
          path: .
      - name: Download in-toto sonar analysis link
        uses: actions/download-artifact@v4
        with:
          name: in-toto-link-sonar-analysis-${{ inputs.service_name }}
          path: .
      - name: Debug directory contents
        run: |
          ls -l .in-toto/root.layout || echo "ERROR: root.layout not found"
          ls -l *.link || echo "ERROR: No link files found"
      - name: Validate layout file
        run: |
          cat .in-toto/root.layout
          python3 -m json.tool .in-toto/root.layout || echo "ERROR: Invalid JSON in root.layout"
          grep '"signatures"' .in-toto/root.layout || echo "ERROR: No signatures found in root.layout"
      - name: Validate link files
        run: |
          for link in *.link; do
            echo "Validating $link"
            python3 -m json.tool "$link" || echo "ERROR: Invalid JSON in $link"
            grep '"keyid": "7460d0230d70d1f99405c89fb51d34ab8bbeec0368ef46321c3263dc4e54134e"' "$link" || echo "ERROR: Incorrect keyid in $link"
          done
      - name: Load in-toto public key
        run: |
          echo "${{ secrets.IN_TOTO_PUBLIC_KEY }}" | tr -d '\r\n' | sed 's/[^[:print:]]//g' > in-toto.pub
          cat in-toto.pub
      - name: Verify in-toto pipeline
        run: in-toto-verify --layout .in-toto/root.layout --verification-keys in-toto.pub --verbose
