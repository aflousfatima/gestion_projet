name: MLOps Pipeline with DVC and Google Drive

on:
  push:
    branches: [ main ]
    paths:
      - 'AI_Service/app/data/intents_complete.json.dvc'
      - 'AI_Service/app/data/tasks_dataset.csv.dvc'
      - 'AI_Service/app/models/*.dvc'
      - 'AI_Service/app/chatbot/data/*.dvc'
      - 'AI_Service/app/**.py'
      - 'AI_Service/tests/**.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'AI_Service/app/data/intents_complete.json.dvc'
      - 'AI_Service/app/data/tasks_dataset.csv.dvc'
      - 'AI_Service/app/models/*.dvc'
      - 'AI_Service/app/chatbot/data/*.dvc'
      - 'AI_Service/app/**.py'
      - 'AI_Service/tests/**.py'
  schedule:
    - cron: '0 14 * * *'

permissions:
  contents: write

jobs:
  validate-and-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify DVC repository structure
        working-directory: AI_Service
        run: |
          ls -la
          ls -la .dvc || echo "DVC directory (.dvc) not found!"
          cat .dvc/config || echo "DVC config file (.dvc/config) not found!"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install great_expectations==0.18.21 pandas dvc[gdrive]==3.55.2

      - name: Configure Google Drive service account
        env:
          GDRIVE_SA_CREDENTIALS: ${{ secrets.GDRIVE_SA_CREDENTIALS }}
        run: |
          echo "$GDRIVE_SA_CREDENTIALS" > AI_Service/gdrive-sa.json
          python -c "import json; json.load(open('AI_Service/gdrive-sa.json'))" || { echo "Invalid JSON in gdrive-sa.json"; exit 1; }
          cd AI_Service
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_service_account_json_file_path gdrive-sa.json

      - name: Pull DVC files
        run: |
          cd AI_Service
          dvc pull
          ls -la app/models/
          ls -la app/data/ app/chatbot/data/

      - name: Ensure model and data files exist
        working-directory: AI_Service
        run: |
          for file in app/models/best_model.pkl app/models/scaler.pkl app/models/encoder.pkl app/models/tfidf.pkl app/models/all_tags.pkl app/models/features.pkl app/chatbot/data/metadata.pkl app/chatbot/data/faiss_index.bin; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found"
              exit 1
            fi
          done

      - name: Run Great Expectations checkpoint for intents
        working-directory: AI_Service
        run: |
          python manage-great_expectations/create_intents_checkpoint.py > intents_output.log 2>&1
          cat intents_output.log

      - name: Check intents validation result
        working-directory: AI_Service
        run: |
          if grep -q "Success: False" intents_output.log || grep -q "Erreur" intents_output.log; then
            echo "Intents validation failed! Check the output above for details."
            exit 1
          fi
        if: always()

      - name: Run Great Expectations checkpoint for tasks
        working-directory: AI_Service
        run: |
          python manage-great_expectations/create_checkpoint.py > tasks_output.log 2>&1
          cat tasks_output.log

      - name: Check tasks validation result
        working-directory: AI_Service
        run: |
          if grep -q "Success: False" tasks_output.log || grep -q "Erreur" tasks_output.log; then
            echo "Tasks validation failed! Check the output above for details."
            exit 1
          fi
        if: always()

      - name: Version data with DVC
        working-directory: AI_Service
        run: |
          dvc add app/data/intents_complete.json || echo "No changes in intents_complete.json"
          dvc add app/data/tasks_dataset.csv || echo "No changes in tasks_dataset.csv"
          git add app/data/*.dvc app/models/*.dvc
          git commit -m "Versionner les fichiers de donn√©es avec DVC" || echo "Aucun changement √† versionner."
          dvc push

      - name: Push Git changes
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            ${{ job.status == 'success' && '‚úÖ Les donn√©es ont pass√© la validation et ont √©t√© versionn√©es avec succ√®s !' || 'üö® Alerte : √âchec de la validation ou du versioning. V√©rifiez les logs : https://github.com/fatimaflous/gestion_projet/actions/runs/${{ github.run_id }}' }}
        if: always()

  run-tests:
    runs-on: ubuntu-latest
    needs: validate-and-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r AI_Service/requirements.txt
          pip install pytest==8.3.3 pytest-asyncio==0.24.0 pytest-cov==5.0.0

      - name: Configure Google Drive service account
        env:
          GDRIVE_SA_CREDENTIALS: ${{ secrets.GDRIVE_SA_CREDENTIALS }}
        run: |
          echo "$GDRIVE_SA_CREDENTIALS" > AI_Service/gdrive-sa.json
          python -c "import json; json.load(open('AI_Service/gdrive-sa.json'))" || { echo "Invalid JSON in gdrive-sa.json"; exit 1; }
          cd AI_Service
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_service_account_json_file_path gdrive-sa.json

      - name: Pull DVC files
        run: |
          cd AI_Service
          dvc pull
          ls -la app/models/
          ls -la app/chatbot/data/

      - name: Ensure model files exist
        working-directory: AI_Service
        run: |
          for file in app/models/best_model.pkl app/models/scaler.pkl app/models/encoder.pkl app/models/tfidf.pkl app/models/all_tags.pkl app/models/features.pkl; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found"
              exit 1
            fi
          done

      - name: Create .env file
        run: |
          cat << EOF > AI_Service/.env
          MODEL_PATH=app/models/best_model.pkl
          SCALER_PATH=app/models/scaler.pkl
          ENCODER_PATH=app/models/encoder.pkl
          TFIDF_PATH=app/models/tfidf.pkl
          TAGS_PATH=app/models/all_tags.pkl
          FEATURES_PATH=app/models/features.pkl
          LOG_LEVEL=INFO
          INTENTS_PATH=app/chatbot/data/intents_complete.json
          FAISS_INDEX_PATH=app/chatbot/data/faiss_index.bin
          METADATA_PATH=app/chatbot/data/metadata.pkl
          CACHE_PATH=app/chatbot/data/cache.json
          PROJECT_API_URL=http://localhost:8085/api/chatbot/projects
          TASK_API_URL=http://localhost:8086/api/chatbot/tasks
          EOF

      - name: Debug directory structure
        working-directory: AI_Service
        run: |
          echo "Current working directory: $(pwd)"
          ls -R . || echo "Directory listing failed"
          ls -l app/*.py app/**/*.py || echo "No Python files found in app/"
          ls -l tests/*.py tests/**/*.py || echo "No Python files found in tests/"
          cat .coveragerc || echo ".coveragerc not found"

      - name: Run pytest
        working-directory: AI_Service
        run: |
          pytest tests/ --asyncio-mode=auto --cov=app --cov-report=xml:coverage.xml --cov-report=html:cov_html --cov-config=.coveragerc --cov-branch -v || echo "Pytest failed, check logs above"

      - name: Debug coverage.xml before fixing paths
        working-directory: AI_Service
        run: |
          echo "Coverage.xml content before fixing paths:"
          cat coverage.xml | grep -E 'source|filename' | head -n 20

      - name: Fix coverage.xml paths for SonarCloud
        working-directory: AI_Service
        run: |
          # Supprimer le pr√©fixe 'app/' des chemins
          sed -i 's#filename="app/\(.*\)"#filename="\1#"g' coverage.xml
          # Remplacer <source> par '.'
          sed -i 's#<source>.*</source>#<source>.</source>#' coverage.xml
          # D√©bogage
          echo "Updated coverage.xml paths:"
          cat coverage.xml | grep -E 'source|filename' | head -n 20

      - name: Debug pytest results
        working-directory: AI_Service
        run: |
          echo "Pytest exit code: $?"
          ls -l coverage.xml || echo "coverage.xml not found"
          if [ -f coverage.xml ]; then
            echo "Contents of coverage.xml (first 50 lines):"
            cat coverage.xml | head -n 50
            echo "Checking coverage.xml paths:"
            cat coverage.xml | grep -E 'source|filename'
          fi

      - name: Verify coverage.xml
        working-directory: AI_Service
        run: |
          if [ ! -s coverage.xml ]; then
            echo "Error: coverage.xml is empty or not generated"
            exit 1
          fi
          echo "Coverage.xml generated, size: $(wc -l coverage.xml) lines"
          echo "Checking coverage.xml paths:"
          cat coverage.xml | grep -E 'source|filename'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: AI_Service/coverage.xml
        if: always()

      - name: Debug directory structure and coverage.xml
        working-directory: AI_Service
        run: |
          pwd
          ls -R
          echo "Checking coverage.xml content:"
          cat coverage.xml | grep -E 'source|filename' | head -n 20
          echo "Checking if app directory exists:"
          ls -ld app
          echo "Checking source files in app:"
          find app -type f -name "*.py"

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: AI_Service/cov_html
        if: always()

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            ${{ job.status == 'success' && format('‚úÖ Tous les tests pytest ont r√©ussi ! Couverture des lignes : {0}%, branches : {1}%.', '73.00', '43.85') || format('üö® Alerte : √âchec des tests pytest. V√©rifiez les logs : https://github.com/fatimaflous/gestion_projet/actions/runs/{0}', github.run_id) }}
        if: always()

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install DVC
        run: |
          python -m pip install --upgrade pip
          pip install dvc[gdrive]==3.55.2

      - name: Configure Google Drive service account
        env:
          GDRIVE_SA_CREDENTIALS: ${{ secrets.GDRIVE_SA_CREDENTIALS }}
        run: |
          echo "$GDRIVE_SA_CREDENTIALS" > AI_Service/gdrive-sa.json
          python -c "import json; json.load(open('AI_Service/gdrive-sa.json'))" || { echo "Invalid JSON in gdrive-sa.json"; exit 1; }
          cd AI_Service
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_service_account_json_file_path gdrive-sa.json

      - name: Pull DVC files
        run: |
          cd AI_Service
          dvc pull
          ls -la app/ app/data/ app/models/ app/chatbot/data/ || echo "DVC files not found"

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: AI_Service/

      - name: Move coverage.xml to correct location
        working-directory: AI_Service
        run: |
          if [ -f coverage-report/coverage.xml ]; then
            echo "Found coverage.xml in coverage-report/, moving to AI_Service/"
            mv coverage-report/coverage.xml .
            rm -rf coverage-report/
          elif [ -f coverage.xml ]; then
            echo "coverage.xml already in correct location (AI_Service/)"
          else
            echo "Error: coverage.xml not found in coverage-report/ or AI_Service/"
            ls -R .
            find . -name coverage.xml || echo "coverage.xml not found anywhere"
            exit 1
          fi

      - name: Check downloaded coverage.xml content
        working-directory: AI_Service
        run: |
          echo "Checking downloaded coverage.xml content:"
          ls -l coverage.xml || { echo "Error: coverage.xml not found"; exit 1; }
          cat coverage.xml | grep -E 'source|filename' | head -n 20

      - name: Debug coverage report and directory structure
        working-directory: AI_Service
        run: |
          echo "Current working directory: $(pwd)"
          ls -R . || echo "AI_Service not found"
          ls -l app/*.py app/**/*.py || echo "Python files not found"
          ls -l coverage.xml || echo "coverage.xml not found"
          echo "Checking coverage.xml paths:"
          cat coverage.xml | grep -E 'source|filename' || echo "coverage.xml not readable"

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=fatimaaflous
            -Dsonar.projectKey=fatimaaflous_gestion_projet
            -Dsonar.python.version=3.12
            -Dsonar.projectBaseDir=AI_Service/app
            -Dsonar.sources=.
            -Dsonar.tests=../tests
            -Dsonar.python.coverage.reportPaths=../coverage.xml
            -Dsonar.exclusions=**/migrations/**,**/tests/**,**/manage-great_expectations/**,**/__init__.py
            -Dsonar.coverage.exclusions=**/__init__.py
            -Dsonar.scm.provider=git
            -Dsonar.scm.revision=main
            -Dsonar.branch.name=main
            -Dsonar.python.coveragePlugin=cobertura

      - name: Debug SonarCloud working directory
        working-directory: AI_Service
        run: |
          echo "SonarCloud working directory: $(pwd)"
          ls -la .
          ls -la ../tests/
          ls -l ../coverage.xml || echo "coverage.xml not found"

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            ${{ job.status == 'success' && '‚úÖ Analyse SonarCloud termin√©e ! R√©sultats : https://sonarcloud.io/project/overview?id=fatimaaflous_gestion_projet' || format('üö® √âchec de l‚Äôanalyse SonarCloud. V√©rifiez les logs : https://github.com/fatimaflous/gestion_projet/actions/runs/{0}', github.run_id) }}
        if: always()
