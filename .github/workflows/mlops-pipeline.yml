name: MLOps Pipeline with DVC and Google Drive

on:
  push:
    branches: [ main ]
    paths:
      - 'AI_Service/app/data/intents_complete.json.dvc'
      - 'AI_Service/app/data/tasks_dataset.csv.dvc'
      - 'AI_Service/app/**.py' # D√©clencher sur les modifications de code
      - 'AI_Service/tests/**.py' # D√©clencher sur les modifications de tests
  pull_request:
    branches: [ main ]
    paths:
      - 'AI_Service/app/data/intents_complete.json.dvc'
      - 'AI_Service/app/data/tasks_dataset.csv.dvc'
  schedule:
    - cron: '0 14 * * *' # Ex√©cute tous les jours √† 14h UTC

permissions:
  contents: write # Autorise l'√©criture dans le d√©p√¥t

jobs:
  validate-and-version:
    runs-on: ubuntu-latest
    steps:
      # Cloner le d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4

      # V√©rifier la structure du d√©p√¥t DVC
      - name: Verify DVC repository structure
        working-directory: AI_Service
        run: |
          ls -la
          ls -la .dvc || echo "DVC directory (.dvc) not found!"
          cat .dvc/config || echo "DVC config file (.dvc/config) not found!"

      # Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Installer les d√©pendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install great_expectations==0.18.21 pandas dvc[gdrive]==3.55.2

      # Configurer le compte de service Google Drive
      - name: Configure Google Drive service account
        env:
          GDRIVE_SA_CREDENTIALS: ${{ secrets.GDRIVE_SA_CREDENTIALS }}
        run: |
          # √âcrire le secret dans un fichier JSON via une variable d'environnement
          echo "$GDRIVE_SA_CREDENTIALS" > AI_Service/gdrive-sa.json
          # V√©rifier le contenu du fichier
          cat AI_Service/gdrive-sa.json
          # V√©rifier la validit√© du JSON
          python -c "import json; json.load(open('AI_Service/gdrive-sa.json'))" || { echo "Invalid JSON in gdrive-sa.json"; exit 1; }
          cd AI_Service
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_service_account_json_file_path gdrive-sa.json

      # Restaurer les fichiers DVC depuis Google Drive
      - name: Pull DVC files
        run: |
          cd AI_Service
          dvc pull
        continue-on-error: true

      # Ex√©cuter la validation des intents
      - name: Run Great Expectations checkpoint for intents
        working-directory: AI_Service
        run: |
          python manage-great_expectations/create_intents_checkpoint.py > intents_output.log 2>&1
          cat intents_output.log

      # V√©rifier le r√©sultat de la validation des intents
      - name: Check intents validation result
        working-directory: AI_Service
        run: |
          if grep -q "Success: False" intents_output.log || grep -q "Erreur" intents_output.log; then
            echo "Intents validation failed! Check the output above for details."
            exit 1
          fi
        if: always()

      # Ex√©cuter la validation des t√¢ches
      - name: Run Great Expectations checkpoint for tasks
        working-directory: AI_Service
        run: |
          python manage-great_expectations/create_checkpoint.py > tasks_output.log 2>&1
          cat tasks_output.log

      # V√©rifier le r√©sultat des t√¢ches
      - name: Check tasks validation result
        working-directory: AI_Service
        run: |
          if grep -q "Success: False" tasks_output.log || grep -q "Erreur" tasks_output.log; then
            echo "Tasks validation failed ! Check the output above for details."
            exit 1
          fi
        if: always()

      # Versionner les fichiers avec DVC
      - name: Version data with DVC
        working-directory: AI_Service
        run: |
          dvc add app/data/intents_complete.json || echo "No changes in intents_complete.json"
          dvc add app/data/tasks_dataset.csv || echo "No changes in tasks_dataset.csv"
          git add app/data/*.dvc
          git commit -m "Versionner les fichiers de donn√©es avec DVC" || echo "Aucun changement √† versionner."
          dvc push

      # Pousser les changements Git
      - name: Push Git changes
        run: |
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Envoyer une notification Slack
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            ${{ job.status == 'success' && '‚úÖ Les donn√©es ont pass√© la validation et ont √©t√© versionn√©es avec succ√®s !' || 'üö® Alerte : √âchec de la validation ou du versioning. V√©rifiez les logs : https://github.com/fatimaflous/gestion_projet/actions/runs/${{ github.run_id }}' }}
        if: always()
    
  run-tests:
    runs-on: ubuntu-latest
    needs: validate-and-version # S'ex√©cute apr√®s validate-and-version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r AI_Service/requirements.txt
          pip install pytest-cov

      - name: Configure Google Drive service account
        env:
          GDRIVE_SA_CREDENTIALS: ${{ secrets.GDRIVE_SA_CREDENTIALS }}
        run: |
          echo "$GDRIVE_SA_CREDENTIALS" > AI_Service/gdrive-sa.json
          python -c "import json; json.load(open('AI_Service/gdrive-sa.json'))" || { echo "Invalid JSON in gdrive-sa.json"; exit 1; }
          cd AI_Service
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_service_account_json_file_path gdrive-sa.json

      - name: Pull DVC files
        run: |
          cd AI_Service
          dvc pull

      - name: Run pytest
        working-directory: AI_Service
        run: |
          pytest tests/ --asyncio-mode=auto --cov=app --cov-report=xml -v

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: AI_Service/coverage.xml

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            ${{ job.status == 'success' && '‚úÖ Tous les tests pytest ont r√©ussi ! Rapport de couverture g√©n√©r√©.' || 'üö® Alerte : √âchec des tests pytest. V√©rifiez les logs : https://github.com/fatimaaflous/gestion_projet/actions/runs/${{ github.run_id }}' }}
        if: always()
