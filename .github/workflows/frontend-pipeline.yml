name: CI/CD with DevSecOps and Docker for Next.js

permissions:
  contents: read
  packages: write
  security-events: write

on:
  push:
    branches: [main]
    paths:
      - 'front-end_service/**'
  pull_request:
    branches: [main]
    paths:
      - 'front-end_service/**'

jobs:
  setup-dependencies:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: List Files in front-end_service
        run: ls -l

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.11'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./front-end_service/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('front-end_service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: npm ci

  security-analysis:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./front-end_service/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('front-end_service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Check Dependencies for Vulnerabilities
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run ESLint Security Scan
        run: npm run lint
        continue-on-error: true

      - name: Generate CycloneDX SBOM
        run: |
          npm install -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-file bom.json
        working-directory: ./front-end_service

      - name: Submit SBOM to GitHub Dependency Graph
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.GITHUB_TOKEN }}
          scan-dir: './front-end_service'

  build-test:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./front-end_service/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('front-end_service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Build Next.js App
        id: build
        run: |
          START_TIME=$(date +%s)
          npm run build
          END_TIME=$(date +%s)
          echo "BUILD_TIME=$((END_TIME - START_TIME))" >> $GITHUB_ENV
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Run Tests
        id: test
        run: |
          START_TIME=$(date +%s)
          npm run test -- --coverage
          END_TIME=$(date +%s)
          echo "TEST_TIME=$((END_TIME - START_TIME))" >> $GITHUB_ENV
          COVERAGE=$(grep -o '[0-9]\+\.[0-9]\+%' coverage/lcov.info | head -1 | tr -d '%')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Debug Coverage Report
        run: |
          ls -l coverage/
          cat coverage/lcov.info || echo "No lcov.info found"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: ./front-end_service

  metrics:
    needs: build-test
    runs-on: ubuntu-latest
    services:
      pushgateway:
        image: prom/pushgateway:latest
        ports:
          - 9091:9091
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Push Metrics to Pushgateway
        run: |
          echo -e "# HELP build_time_seconds Time taken to build the Next.js app in seconds\n# TYPE build_time_seconds gauge\nbuild_time_seconds{job=\"ci_cd_metrics\",run_id=\"${GITHUB_RUN_ID}\"} ${BUILD_TIME}" | curl --data-binary @- http://pushgateway:9091/metrics/job/ci_cd_metrics
          echo -e "# HELP test_time_seconds Time taken to run tests in seconds\n# TYPE test_time_seconds gauge\ntest_time_seconds{job=\"ci_cd_metrics\",run_id=\"${GITHUB_RUN_ID}\"} ${TEST_TIME}" | curl --data-binary @- http://pushgateway:9091/metrics/job/ci_cd_metrics
          echo -e "# HELP test_coverage_percent Test coverage percentage\n# TYPE test_coverage_percent gauge\ntest_coverage_percent{job=\"ci_cd_metrics\",run_id=\"${GITHUB_RUN_ID}\"} ${COVERAGE}" | curl --data-binary @- http://pushgateway:9091/metrics/job/ci_cd_metrics
        env:
          BUILD_TIME: ${{ env.BUILD_TIME }}
          TEST_TIME: ${{ env.TEST_TIME }}
          COVERAGE: ${{ env.COVERAGE }}

  docker-build-scan:
    needs: build-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        id: docker_build
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./front-end_service
          file: ./front-end_service/Dockerfile
          push: false
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ github.sha }}
          platforms: linux/amd64
          outputs: type=docker

      - name: Run Trivy Vulnerability Scanner
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy Scan Results to GitHub Security
        if: github.event_name == 'push'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  docker-sign-push:
    needs: docker-build-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front-end_service
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: ./front-end_service
          file: ./front-end_service/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ github.sha }}
          platforms: linux/amd64

      - name: Install Cosign
        if: github.event_name == 'push'
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign Docker Image
        if: github.event_name == 'push'
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          cosign sign --yes --key env://COSIGN_PRIVATE_KEY ghcr.io/${{ github.repository }}:${{ github.sha }}

  notify:
    needs: [setup-dependencies, security-analysis, build-test, metrics, docker-build-scan, docker-sign-push]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.26.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: 'C08V19BHQVB'
          slack-message: |
            *GitHub Actions Workflow*: ${{ github.workflow }}
            *Status*: ${{ job.status }}
            *Repository*: ${{ github.repository }}
            *Commit*: ${{ github.sha }}
            *Build Time*: ${{ env.BUILD_TIME }} seconds
            *Test Time*: ${{ env.TEST_TIME }} seconds
            *Test Coverage*: ${{ env.COVERAGE }}%
            *Run URL*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
